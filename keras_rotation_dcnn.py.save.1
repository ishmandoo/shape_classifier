import matplotlib.pyplot as plt
import numpy as np
from skimage.draw import circle, polygon, line_aa
import random
from subprocess import call
from keras.models import Sequential, load_model
from keras.layers import Dense, Activation, Dropout, Flatten, Convolution2D, MaxPooling2D, ZeroPadding2D
from keras.optimizers import SGD
from scipy.misc import imsave
from keras import backend as K
from PIL import Image
import os

def drawCircle(frame, x, y, r):
    rr, cc = circle(x, y, r)
    frame[rr, cc] = 255
    return frame

def drawSquare(x, y, w):
    frame = np.zeros((100, 100, 3) , dtype=np.uint8)
    h = w
    r = np.array([x, x+w, x+w, x, x])
    c = np.array([y, y, y+h, y+h, y])
    rr, cc = polygon(r, c)
    frame[rr, cc] = 255
    return frame

def drawTriangle(x, y, b):
    frame = np.zeros((100, 100, 3) , dtype=np.uint8)
    r = np.array([x, x+b, x, x])
    c = np.array([y, y, y+b, y])
    rr, cc = polygon(r, c)
    frame[rr, cc] = 255
    return frame

def drawAALine(frame, x, y, l, theta):
    x1 = int(x + l * np.cos(theta))
    y1 = int(y + l * np.sin(theta))
    rr, cc, val = line_aa(x, y, x1 , y1)
    frame[rr, cc,0] = val*255
    return frame

def generateBatch(n):
    batch = []
    answers = []
    for i in range(n):
        angle = random.random() * np.pi/2. - np.pi/4 # Restrict range the make easier
        frame = np.zeros((100, 100, 3) , dtype=np.uint8)
        frame = drawAALine(frame, random.randint(30,70),random.randint(30,70), 20, angle)
        x = random.randint(30,70)
        y = random.randint(30,70)
        size = random.randint(2,5)
        frame = drawCircle(frame, x ,y ,size)
        batch.append(frame)
        answers.append([angle])
    return np.array(batch), np.array(answers)

#sample, answer = generateBatch(1)
#print (answer / 3.14) * 180
#im = Image.fromarray(sample[0])
#im.save("test.png")



loadFileFlag = True
saveFileFlag = True

weightFile = 'weights_rotation_dcnn.h5'
if loadFileFlag and os.path.isfile(weightFile):
    print("loaded model")
    model = load_model(weightFile)
else:
    model = Sequential()

    img_width = 100
    img_height = 100

    model.add(Convolution2D(32, 3, 3, border_mode='valid', input_shape=(100, 100,3), dim_ordering="tf"))
    model.add(Activation('relu'))
    model.add(Convolution2D(32, 3, 3))
    model.add(Activation('relu'))
    model.add(MaxPooling2D(pool_size=(2, 2)))
    model.add(Dropout(0.25))

    model.add(Convolution2D(64, 3, 3, border_mode='valid'))
    model.add(Activation('relu'))
    model.add(Convolution2D(64, 3, 3))
    model.add(Activation('relu'))
    model.add(MaxPooling2D(pool_size=(2, 2)))
    model.add(Dropout(0.25))

    model.add(Flatten())
    # Note: Keras does automatic shape inference.
    model.add(Dense(256))
    model.add(Activation('relu'))
    model.add(Dropout(0.5))

    model.add(Dense(1))
    #model.add(Activation('linear'))

    sgd = SGD(lr=0.005, decay=0, momentum=0, nesterov=False)
    model.compile(loss='mean_absolute_error', optimizer=sgd)

for i in range(10):
    X_train, Y_train = generateBatch(10000)
    model.fit(X_train, Y_train, batch_size=200, nb_epoch=1)
    if saveFileFlag:
        model.save(weightFile)

    X_eval, Y_eval = generateBatch(10)
    predictions = model.predict(X_eval)

    print Y_eval
    print predictions
    print ((Y_eval-predictions) / 3.141592) * 180

